extend type Query {
  authentification: AuthentificationQuery!
}

extend type Mutation {
  authentification: AuthentificationMutation!
}

type AuthentificationQuery {
  """
  Returns payload of your «Access» token
  """
  tokenPayload: AccessTokenPayload!

  """
  Verify your token
  """
  verifyToken(token: String!): TokenVerificationResponse!
}

type TokenRegistrationError implements Error {
  name: String!
  msg: String!
}

type TokenVerificationError implements Error {
  name: String!
  msg: String!
}

type ResetPasswordError implements Error {
  name: String!
  msg: String!
}

type ResetPasswordSuccess {
  msg: String!
  phones: [String!]!
}

union TokenRegistrationResponse =
    TokenRegistrationSuccess
  | TokenRegistrationError
union TokenVerificationResponse =
    TokenVerificationSuccess
  | TokenVerificationError
union ResetPasswordResponse = ResetPasswordSuccess | ResetPasswordError

type TokenVerificationSuccess {
  payload: AccessTokenPayload!
  query: Query!
}

type TokenRegistrationSuccess {
  payload: TokenBag!
  query: Query!
}

type TokenBag {
  accessToken: AccessToken!
  refreshToken: RefreshToken!
}

type AccessToken {
  token: String!
  payload: AccessTokenPayload!
}

type RefreshToken {
  token: String!
  payload: RefreshTokenPayload!
}

type AccessTokenPayload {
  type: TokenType!
  id: ID!
  uuid: ID!
  roles: [AccountRole!]!
  exp: Int!
  iss: String!
}

type RefreshTokenPayload {
  type: TokenType!
  id: ID!
  uuid: ID!
  roles: [AccountRole!]!
  exp: Int!
  iss: String!
}

enum TokenType {
  access
  refresh
}

type AuthentificationMutation {
  """
  Pass your login and password to get «Access» and «Refresh» tokens pair
  """
  create(login: String!, password: String!): TokenRegistrationResponse!

  """
  Pass your «Refresh» token to exchange it to new «Access» and «Refresh» tokens pair
  """
  refresh(refreshToken: String!): TokenRegistrationResponse!
}